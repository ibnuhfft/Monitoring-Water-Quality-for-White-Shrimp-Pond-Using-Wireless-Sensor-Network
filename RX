#include <SPI.h>
#include <LoRa.h>
// #include <WiFi.h>
// #include <FirebaseESP32.h>
#include <time.h>

#if defined(ESP32) || defined(ARDUINO_RASPBERRY_PI_PICO_W)
#include <WiFi.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#endif

/* FIREBASE START */
// FIREBASE LIBRARY
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"  // Provide the token generation process info.
#include "addons/RTDBHelper.h"   // Provide the RTDB payload printing info and other helper functions.

// const char* ssid = "ELITLAB";
// const char* password = "l@b3l1tiA";
const char *ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 25200;  //+7 gmt
const int daylightOffset_sec = 3600;

#define ss 5
#define rst 14
#define dio0 2
#define en 32


// FIREBASE SETUP
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
bool signupOK = false;

/* 1. Define the WiFi credentials */
#define WIFI_SSID "KVJKVJ"
#define WIFI_PASSWORD "12345678"
/* 2. Define the API Key */
#define API_KEY "AIzaSyB3VUTol0_wvTPPTCSVHhM9YNSBN6W39_s"
/* 3. Define the RTDB URL */
#define DATABASE_URL "https://monitor-suhu-c7513-default-rtdb.firebaseio.com/"
/* 4. ACTIVATE IT for authenticated account: Define the user Email and password that alreadey registerd or added in your project */
// #define USER_EMAIL "<YOUR EMAIL HERE>"
// #define USER_PASSWORD "<YOUR PASSWORD HERE>"

// Function List
//void firebaseSetInt(String, int);
void firebaseSetFloat(String, float);
void firebaseSetString(String databaseDirectory, String value);
//String firebaseGetString(String databaseDirectory);

// Root directory
String device_root = "/";
/* FIREBASE END */

int int_value = 0;
float float_value = 0;
char char_value = 'a';
String tme = "";
String statusLED;

void setup() {
  Serial.begin(115200);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);

  /* WIFI START */
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");

  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
    // printLocalTime();
  }
  // Init and get the time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();
  /* WIFI END */

  /* FIREBASE START */
  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);

  config.api_key = API_KEY;  // Assign RTDB API Key

  /*For anonymous account: Sign up */
  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("Firebase success");
    digitalWrite(LED_BUILTIN, LOW);
    signupOK = true;
  } else {
    String firebaseErrorMessage = config.signer.signupError.message.c_str();

    Serial.printf("%s\n", firebaseErrorMessage);
  }

  /* ACTIVATE IT For authenticated account: Assign the user sign in credentials */
  // auth.user.email = USER_EMAIL;
  // auth.user.password = USER_PASSWORD;

  config.database_url = DATABASE_URL;                  // Assign rtdb url
  config.token_status_callback = tokenStatusCallback;  // Set callback

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  /* FIREBASE END */
  pinMode(en, OUTPUT);
  digitalWrite(en, HIGH);

  Serial.println("LoRa Receiver");
  LoRa.setPins(ss, rst, dio0);

  while (!LoRa.begin(915E6)) {
    Serial.println(".");
    delay(500);

    tme = printLocalTime();
    Serial.println(tme);
  }

  LoRa.setSyncWord(0xF3);
  Serial.println("LoRa Initializing OK!");
}

void loop() {
  // Uncomment the next line to get the current time from the NTP server
  //printLocalTime();
  // tme = printLocalTime();
  // firebaseSetString("Tambak1/Time", tme);
  // firebaseSetString("Tambak2/Time", tme);
  // firebaseSetString("Tambak3/Time", tme);
  int ID = 0;
  float tdsValue_value = 0, phValue_value = 0, temp_value = 0;
  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    String LoRaData = "";
    String name_id = "";

    Serial.print("Received packet '");

    while (LoRa.available()) {
      LoRaData = LoRa.readString();
      Serial.println(LoRaData);
      receive_parse_to_device(LoRaData, ID, temp_value, tdsValue_value, phValue_value);
    }

    Serial.print(" with RSSI ");
    Serial.println(LoRa.packetRssi());
    Serial.println("=======================");
  }

  // firebaseSetInt("int_data", int_value);
  // firebaseSetFloat("float_data", float_value);
  // String string_value = String(char_value);
  // firebaseSetString("string_data", string_value);
}

void receive_parse_to_device(const String &data_received, int &id, float &temp, float &tdsValue, float &phValue) {
  int first_hashtag = data_received.indexOf('#');
  int second_hashtag = data_received.lastIndexOf('#', 10);
  int third_hastag = data_received.lastIndexOf('#');

  String id_string = data_received.substring(0, first_hashtag);
  String temp_string = data_received.substring(first_hashtag + 1, second_hashtag);
  String tdsValue_string = data_received.substring(second_hashtag + 1, third_hastag);
  String phValue_string = data_received.substring(third_hastag + 1);

  id = id_string.toInt();
  temp = temp_string.toFloat();
  tdsValue = tdsValue_string.toFloat();
  phValue = phValue_string.toFloat();
  tme = printLocalTime();
  int tmeHour = tme.toInt();
  Serial.println(id);
  Serial.println(tmeHour);

  for (int i = 1; i <= 3; i++) {
    if (i == id) {
      String tambak = "Tambak" + String(id);
      for (int j = 1; j <= 24; j++) {
        if (j == tmeHour) {
          String timeDir = String(tmeHour);
          String fbDir = tambak + "/" + timeDir;
          // firebaseSetString(timeDir, tme);
          String fbDirSuhu = fbDir + "/Suhu";
          String fbDirTDS = fbDir + "/TDS";
          String fbDirPh = fbDir + "/pH";
          firebaseSetFloat(fbDirSuhu, temp);
          firebaseSetFloat(fbDirTDS, tdsValue);
          firebaseSetFloat(fbDirPh, phValue);
        }
      }
    }
  }
}

String printLocalTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return "";
  }
  //Serial.println(&timeinfo, "%D:%H:%M");
  String time = String(timeinfo.tm_hour);
  // Serial.println(time);
  return time;
}

// String firebaseGetString(String databaseDirectory) {
//   if (Firebase.RTDB.getString(&fbdo, databaseDirectory)) {
//     if (fbdo.dataType() == "string") {
//       String stringValue = fbdo.stringData();
//       return stringValue;
//     }
//   } else {
//     Serial.println(fbdo.errorReason());
//   }
// }

void firebaseSetFloat(String databaseDirectory, float value) {
  // Write an Int number on the database path test/int
  if (Firebase.RTDB.setFloat(&fbdo, databaseDirectory, value)) {
    Serial.print("PASSED: ");
    Serial.println(value);
  } else {
    Serial.println("FAILED");
    Serial.println("REASON: " + fbdo.errorReason());
  }
}




void firebaseSetString(String databaseDirectory, String value) {
  // Write a string on the database path
  if (Firebase.RTDB.setString(&fbdo, databaseDirectory, value)) {
    Serial.print("PASSED: ");
    Serial.println(value);
  } else {
    Serial.println("FAILED");
    Serial.println("REASON: " + fbdo.errorReason());
  }
}
